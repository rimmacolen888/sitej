// test-db-connection.js
require('dotenv').config();
const { Pool } = require('pg');

async function testConnection() {
    console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...');
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env:');
    console.log(`DB_HOST: ${process.env.DB_HOST}`);
    console.log(`DB_PORT: ${process.env.DB_PORT}`);
    console.log(`DB_NAME: ${process.env.DB_NAME}`);
    console.log(`DB_USER: ${process.env.DB_USER}`);
    console.log(`DB_PASSWORD: ${process.env.DB_PASSWORD ? '***–°–ö–†–´–¢***' : '–ù–ï –ó–ê–î–ê–ù'}`);

    const pool = new Pool({
        host: process.env.DB_HOST || 'localhost',
        port: process.env.DB_PORT || 5432,
        database: process.env.DB_NAME || 'site_marketplace',
        user: process.env.DB_USER || 'postgres',
        password: process.env.DB_PASSWORD,
    });

    try {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        const client = await pool.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ!');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
        const result = await client.query('SELECT version()');
        console.log('–í–µ—Ä—Å–∏—è PostgreSQL:', result.rows[0].version);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const dbCheck = await client.query('SELECT current_database()');
        console.log('–¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', dbCheck.rows[0].current_database);
        
        client.release();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        console.log('\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü...');
        const tableCheck = await pool.query(`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name
        `);
        
        if (tableCheck.rows.length > 0) {
            console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
            tableCheck.rows.forEach(row => {
                console.log(`- ${row.table_name}`);
            });
        } else {
            console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.');
            console.log('–í—ã–ø–æ–ª–Ω–∏—Ç–µ: npm run init-db');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:');
        console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
        console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
        
        if (error.code === '28P01') {
            console.log('\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
            console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –≤ —Ñ–∞–π–ª–µ .env');
            console.log('2. –°–±—Ä–æ—Å—å—Ç–µ –ø–∞—Ä–æ–ª—å PostgreSQL:');
            console.log('   - –û—Ç–∫—Ä–æ–π—Ç–µ psql: psql -U postgres');
            console.log('   - –í—ã–ø–æ–ª–Ω–∏—Ç–µ: ALTER USER postgres PASSWORD \'postgres\';');
            console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–ª—É–∂–±–∞ PostgreSQL –∑–∞–ø—É—â–µ–Ω–∞');
        } else if (error.code === 'ECONNREFUSED') {
            console.log('\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
            console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω');
            console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5432)');
            console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞');
        } else if (error.code === '3D000') {
            console.log('\nüîß –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë:');
            console.log('1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ PostgreSQL: psql -U postgres');
            console.log('2. –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É: CREATE DATABASE site_marketplace;');
        }
    } finally {
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testConnection();