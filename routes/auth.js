const express = require('express');
const { body } = require('express-validator');
const router = express.Router();

const DatabaseService = require('../services/databaseService');
const TelegramService = require('../services/telegramService');
const { 
    generateToken, 
    hashPassword, 
    comparePassword,
    validateInviteCode,
    validateUserData,
    logUserActivity
} = require('../middleware/auth');
const { AppError, catchAsync } = require('../middleware/errorHandler');

// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
const registerValidation = [
    body('username')
        .isLength({ min: 3, max: 50 })
        .withMessage('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤')
        .matches(/^[a-zA-Z0-9_-]+$/)
        .withMessage('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -'),
    body('password')
        .isLength({ min: 6, max: 100 })
        .withMessage('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 6 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤'),
    body('inviteCode')
        .isLength({ min: 3 })
        .withMessage('–ò–Ω–≤–∞–π—Ç-–∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
];

const loginValidation = [
    body('username')
        .notEmpty()
        .withMessage('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
    body('password')
        .notEmpty()
        .withMessage('–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
];

// POST /api/auth/check-invite - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞
router.post('/check-invite', logUserActivity, catchAsync(async (req, res) => {
    const { inviteCode } = req.body;

    if (!inviteCode) {
        throw new AppError('–ò–Ω–≤–∞–π—Ç-–∫–æ–¥ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω', 400);
    }

    const validation = await validateInviteCode(inviteCode);
    
    if (!validation.isValid) {
        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
        await DatabaseService.query(
            'INSERT INTO auth_logs (invite_code, ip_address, country, action) VALUES ($1, $2, $3, $4)',
            [inviteCode, req.userIP, req.userCountry, 'invalid_invite']
        );
        
        throw new AppError(validation.message, 400);
    }

    res.json({
        success: true,
        message: '–ò–Ω–≤–∞–π—Ç-–∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω',
        expiresAt: validation.inviteCode.expires_at
    });
}));

// POST /api/auth/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/register', registerValidation, logUserActivity, catchAsync(async (req, res) => {
    const { username, password, inviteCode } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    const validation = validateUserData(username, password);
    if (!validation.isValid) {
        throw new AppError(validation.errors.join(', '), 400);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–∞–π—Ç-–∫–æ–¥
    const inviteValidation = await validateInviteCode(inviteCode);
    if (!inviteValidation.isValid) {
        throw new AppError(inviteValidation.message, 400);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    const existingUser = await DatabaseService.getUserByUsername(username);
    if (existingUser) {
        throw new AppError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 400);
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const result = await DatabaseService.transaction(async (client) => {
        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const passwordHash = await hashPassword(password);

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userResult = await client.query(
            `INSERT INTO users (username, password_hash, invite_code_used, access_expires_at)
             VALUES ($1, $2, $3, $4)
             RETURNING id, username, access_expires_at, created_at`,
            [
                username, 
                passwordHash, 
                inviteCode, 
                new Date(Date.now() + 15 * 24 * 60 * 60 * 1000) // 15 –¥–Ω–µ–π
            ]
        );

        const user = userResult.rows[0];

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞
        await client.query(
            'UPDATE invite_codes SET current_uses = current_uses + 1 WHERE code = $1',
            [inviteCode]
        );

        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await client.query(
            'INSERT INTO auth_logs (user_id, invite_code, ip_address, country, action) VALUES ($1, $2, $3, $4, $5)',
            [user.id, inviteCode, req.userIP, req.userCountry, 'register']
        );

        return user;
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = generateToken({
        userId: result.id,
        username: result.username,
        role: 'user'
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    await TelegramService.sendNotification(
        `üÜï –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}\n` +
        `üé´ –ò–Ω–≤–∞–π—Ç-–∫–æ–¥: ${inviteCode}\n` +
        `üåç –°—Ç—Ä–∞–Ω–∞: ${req.userCountry}\n` +
        `üìç IP: ${req.userIP}`
    );

    res.status(201).json({
        success: true,
        message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
        user: {
            id: result.id,
            username: result.username,
            accessExpiresAt: result.access_expires_at,
            createdAt: result.created_at
        },
        token
    });
}));

// POST /api/auth/login - –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
router.post('/login', loginValidation, logUserActivity, catchAsync(async (req, res) => {
    const { username, password } = req.body;

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await DatabaseService.getUserByUsername(username);
    
    if (!user) {
        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
        await DatabaseService.query(
            'INSERT INTO auth_logs (ip_address, country, action) VALUES ($1, $2, $3)',
            [req.userIP, req.userCountry, 'failed_login']
        );
        
        throw new AppError('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 401);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isValidPassword = await comparePassword(password, user.password_hash);
    
    if (!isValidPassword) {
        await DatabaseService.query(
            'INSERT INTO auth_logs (user_id, ip_address, country, action) VALUES ($1, $2, $3, $4)',
            [user.id, req.userIP, req.userCountry, 'failed_login']
        );
        
        throw new AppError('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 401);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (user.is_blocked) {
        if (user.blocked_until && new Date() > user.blocked_until) {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
            await DatabaseService.unblockExpiredUsers();
            user.is_blocked = false;
            user.blocked_until = null;
        } else {
            throw new AppError(
                `–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ ${user.blocked_until}`, 
                403
            );
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–∞
    if (new Date() > user.access_expires_at) {
        throw new AppError('–°—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –∏—Å—Ç–µ–∫. –ù—É–∂–µ–Ω –Ω–æ–≤—ã–π –∏–Ω–≤–∞–π—Ç-–∫–æ–¥', 403);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    await DatabaseService.updateUserLastLogin(user.id, req.userIP, req.userCountry);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = generateToken({
        userId: user.id,
        username: user.username,
        role: 'user'
    });

    res.json({
        success: true,
        message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        user: {
            id: user.id,
            username: user.username,
            accessExpiresAt: user.access_expires_at,
            lastLogin: new Date()
        },
        token
    });
}));

// POST /api/auth/admin-login - –í—Ö–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
router.post('/admin-login', logUserActivity, catchAsync(async (req, res) => {
    const { username, password } = req.body;

    if (!username || !password) {
        throw new AppError('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã', 400);
    }

    // –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const adminResult = await DatabaseService.query(
        'SELECT * FROM admins WHERE username = $1 AND is_active = true',
        [username]
    );

    const admin = adminResult.rows[0];
    
    if (!admin) {
        await DatabaseService.query(
            'INSERT INTO admin_logs (action, details, ip_address) VALUES ($1, $2, $3)',
            ['failed_login', JSON.stringify({ username }), req.userIP]
        );
        
        throw new AppError('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 401);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º crypt –∏–∑ PostgreSQL)
    const passwordCheck = await DatabaseService.query(
        'SELECT crypt($1, password_hash) = password_hash as valid FROM admins WHERE id = $2',
        [password, admin.id]
    );

    if (!passwordCheck.rows[0]?.valid) {
        await DatabaseService.query(
            'INSERT INTO admin_logs (admin_id, action, details, ip_address) VALUES ($1, $2, $3, $4)',
            [admin.id, 'failed_login', JSON.stringify({ reason: 'wrong_password' }), req.userIP]
        );
        
        throw new AppError('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 401);
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
    await DatabaseService.query(
        'INSERT INTO admin_logs (admin_id, action, details, ip_address) VALUES ($1, $2, $3, $4)',
        [admin.id, 'login', JSON.stringify({ country: req.userCountry }), req.userIP]
    );

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∞
    const token = generateToken({
        adminId: admin.id,
        username: admin.username,
        role: 'admin',
        permissions: admin.permissions
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    await TelegramService.sendNotification(
        `üîê –í—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n` +
        `üë§ –ê–¥–º–∏–Ω: ${admin.username}\n` +
        `üåç –°—Ç—Ä–∞–Ω–∞: ${req.userCountry}\n` +
        `üìç IP: ${req.userIP}\n` +
        `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`
    );

    res.json({
        success: true,
        message: '–í—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        admin: {
            id: admin.id,
            username: admin.username,
            permissions: admin.permissions
        },
        token
    });
}));

// GET /api/auth/me - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
router.get('/me', logUserActivity, catchAsync(async (req, res) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        throw new AppError('–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω', 401);
    }

    try {
        const jwt = require('jsonwebtoken');
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        
        let userData;
        if (decoded.role === 'admin') {
            const adminResult = await DatabaseService.query(
                'SELECT id, username, permissions, created_at FROM admins WHERE id = $1 AND is_active = true',
                [decoded.adminId]
            );
            userData = adminResult.rows[0];
        } else {
            userData = await DatabaseService.getUserById(decoded.userId);
            delete userData.password_hash; // –£–¥–∞–ª—è–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
        }

        if (!userData) {
            throw new AppError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 401);
        }

        res.json({
            success: true,
            user: userData,
            role: decoded.role
        });
    } catch (error) {
        throw new AppError('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω', 401);
    }
}));

module.exports = router;