// fix-admin-password.js
require('dotenv').config();
const { Pool } = require('pg');
const bcrypt = require('bcryptjs');

async function fixAdminPassword() {
    const pool = new Pool({
        host: process.env.DB_HOST || 'localhost',
        port: process.env.DB_PORT || 5432,
        database: process.env.DB_NAME || 'site_marketplace',
        user: process.env.DB_USER || 'postgres',
        password: process.env.DB_PASSWORD,
    });

    try {
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
        const existingAdmin = await pool.query('SELECT * FROM admins WHERE username = $1', ['admin']);
        
        if (existingAdmin.rows.length === 0) {
            console.log('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ...');
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
            const passwordHash = await bcrypt.hash('admin123', 12);
            await pool.query(`
                INSERT INTO admins (username, password_hash, is_active, permissions) 
                VALUES ($1, $2, true, $3)
            `, [
                'admin', 
                passwordHash, 
                JSON.stringify({
                    manage_users: true,
                    manage_sites: true,
                    manage_invites: true,
                    manage_orders: true,
                    import_data: true
                })
            ]);
            
            console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        } else {
            console.log('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω. –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
            const admin = existingAdmin.rows[0];
            const isValidPassword = await bcrypt.compare('admin123', admin.password_hash);
            
            if (!isValidPassword) {
                console.log('–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π, –æ–±–Ω–æ–≤–ª—è–µ–º...');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
                const newPasswordHash = await bcrypt.hash('admin123', 12);
                await pool.query(
                    'UPDATE admins SET password_hash = $2, is_active = true WHERE username = $1',
                    ['admin', newPasswordHash]
                );
                
                console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
            } else {
                console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π');
                
                // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∞–¥–º–∏–Ω –∞–∫—Ç–∏–≤–µ–Ω
                await pool.query(
                    'UPDATE admins SET is_active = true WHERE username = $1',
                    ['admin']
                );
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–Ω
        console.log('\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–Ω–∞...');
        const testAdmin = await pool.query('SELECT * FROM admins WHERE username = $1', ['admin']);
        const testPasswordValid = await bcrypt.compare('admin123', testAdmin.rows[0].password_hash);
        
        console.log('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: admin');
        console.log('–ü–∞—Ä–æ–ª—å –≤–∞–ª–∏–¥–µ–Ω:', testPasswordValid);
        console.log('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–µ–Ω:', testAdmin.rows[0].is_active);
        
        if (testPasswordValid && testAdmin.rows[0].is_active) {
            console.log('\nüéâ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:');
            console.log('URL: http://localhost:3000/admin.html');
            console.log('–õ–æ–≥–∏–Ω: admin');
            console.log('–ü–∞—Ä–æ–ª—å: admin123');
        } else {
            console.log('\n‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error.message);
    } finally {
        await pool.end();
    }
}

fixAdminPassword();