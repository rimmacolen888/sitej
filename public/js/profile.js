// –ú–æ–¥—É–ª—å –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class ProfileModule {
    constructor() {
        this.currentTab = 'profile-info';
        this.userData = null;
        this.purchaseHistory = [];
        this.activeOffers = [];
    }

    async init() {
        this.bindEvents();
    }

    bindEvents() {
        // –¢–∞–±—ã –ø—Ä–æ—Ñ–∏–ª—è
        const tabBtns = document.querySelectorAll('.tab-btn');
        tabBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const tabId = e.target.getAttribute('data-tab');
                this.showTab(tabId);
            });
        });

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –ø—Ä–æ—Ñ–∏–ª—é
        const profileLink = document.querySelector('a[href="#profile"]');
        if (profileLink) {
            profileLink.addEventListener('click', (e) => {
                e.preventDefault();
                this.showProfile();
            });
        }
    }

    async showProfile() {
        UI.hide('dashboard-section');
        UI.hide('site-details-section');
        UI.hide('cart-section');
        UI.show('profile-section');

        await this.loadProfileData();
        this.showTab(this.currentTab);
    }

    async loadProfileData() {
        try {
            const response = await api.getUserProfile();
            if (response.success) {
                this.userData = response.user;
                this.renderProfileInfo();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            UI.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
        }
    }

    showTab(tabId) {
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Ç–∞–±–æ–≤
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
        });

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–π —Ç–∞–±
        const activeBtn = document.querySelector(`[data-tab="${tabId}"]`);
        const activeContent = document.getElementById(tabId);

        if (activeBtn) activeBtn.classList.add('active');
        if (activeContent) activeContent.classList.add('active');

        this.currentTab = tabId;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∞–±–∞
        switch (tabId) {
            case 'profile-info':
                this.renderProfileInfo();
                break;
            case 'purchase-history':
                this.loadPurchaseHistory();
                break;
            case 'active-offers':
                this.loadActiveOffers();
                break;
            case 'purchase-categories':
                this.loadPurchaseCategories();
                break;
        }
    }

    renderProfileInfo() {
        const profileInfoTab = document.getElementById('profile-info');
        if (!profileInfoTab || !this.userData) return;

        const stats = this.userData.stats || {
            total_orders: 0,
            total_spent: 0,
            active_offers: 0,
            cart_items: 0
        };

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞
        const accessExpires = new Date(this.userData.access_expires_at);
        const now = new Date();
        const daysLeft = Math.ceil((accessExpires - now) / (1000 * 60 * 60 * 24));
        
        let accessStatus = '';
        if (this.userData.is_blocked) {
            accessStatus = `<div class="status-blocked">üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ ${UI.formatDate(this.userData.blocked_until, true)}</div>`;
        } else if (daysLeft <= 0) {
            accessStatus = '<div class="status-expired">‚è∞ –î–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫</div>';
        } else if (daysLeft <= 3) {
            accessStatus = `<div class="status-warning">‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${daysLeft} –¥–Ω.</div>`;
        } else {
            accessStatus = `<div class="status-active">‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω (${daysLeft} –¥–Ω.)</div>`;
        }

        profileInfoTab.innerHTML = `
            <div class="profile-info">
                <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ</h3>
                
                <div class="profile-details">
                    <div class="profile-item">
                        <strong>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong> ${this.userData.username}
                    </div>
                    <div class="profile-item">
                        <strong>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</strong> ${UI.formatDate(this.userData.created_at)}
                    </div>
                    <div class="profile-item">
                        <strong>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:</strong> ${this.userData.last_login ? UI.formatDate(this.userData.last_login, true) : '–ù–∏–∫–æ–≥–¥–∞'}
                    </div>
                    <div class="profile-item">
                        <strong>–ò–Ω–≤–∞–π—Ç-–∫–æ–¥:</strong> ${this.userData.invite_code_used}
                    </div>
                    <div class="profile-item">
                        <strong>–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞:</strong> ${accessStatus}
                    </div>
                </div>
            </div>

            <div class="profile-stats">
                <div class="stat-card">
                    <div class="stat-card-value">${stats.total_orders}</div>
                    <div class="stat-card-label">–ó–∞–∫–∞–∑–æ–≤</div>
                </div>
                <div class="stat-card">
                    <div class="stat-card-value">${UI.formatPrice(stats.total_spent).replace('‚ÇΩ', '')}</div>
                    <div class="stat-card-label">–ü–æ—Ç—Ä–∞—á–µ–Ω–æ ‚ÇΩ</div>
                </div>
                <div class="stat-card">
                    <div class="stat-card-value">${stats.active_offers}</div>
                    <div class="stat-card-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</div>
                </div>
                <div class="stat-card">
                    <div class="stat-card-value">${stats.cart_items}</div>
                    <div class="stat-card-label">–í –∫–æ—Ä–∑–∏–Ω–µ</div>
                </div>
            </div>
        `;
    }

    async loadPurchaseHistory(page = 1) {
        try {
            const response = await api.getPurchaseHistory(page, 10);
            if (response.success) {
                this.purchaseHistory = response.orders;
                this.renderPurchaseHistory(response.pagination);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫:', error);
            UI.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫');
        }
    }

    renderPurchaseHistory(pagination) {
        const historyTab = document.getElementById('purchase-history');
        if (!historyTab) return;

        if (this.purchaseHistory.length === 0) {
            historyTab.innerHTML = `
                <div class="empty-state">
                    <h3>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç–∞</h3>
                    <p>–í—ã –µ—â–µ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –ø–æ–∫—É–ø–æ–∫</p>
                    <button class="btn btn-primary" onclick="catalogModule.showCatalog()">
                        –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ç–∞–ª–æ–≥—É
                    </button>
                </div>
            `;
            return;
        }

        let historyHtml = '<div class="purchase-history">';
        
        this.purchaseHistory.forEach(order => {
            const statusClass = order.status === 'confirmed' ? 'success' : 
                               order.status === 'cancelled' ? 'danger' : 'warning';
            
            historyHtml += `
                <div class="order-card">
                    <div class="order-header">
                        <div class="order-info">
                            <h4>–ó–∞–∫–∞–∑ #${order.id}</h4>
                            <div class="order-date">${UI.formatDate(order.created_at, true)}</div>
                        </div>
                        <div class="order-status">
                            <span class="status-badge status-${statusClass}">${this.getStatusText(order.status)}</span>
                            <div class="order-amount">${UI.formatPrice(order.total_amount)}</div>
                        </div>
                    </div>
                    
                    <div class="order-items">
                        ${order.items.map(item => `
                            <div class="order-item">
                                <div class="item-info">
                                    <div class="item-title">${UI.escapeHtml(item.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</div>
                                    <div class="item-url">${UI.escapeHtml(item.url)}</div>
                                    <div class="item-category">${item.category} ‚Ä¢ ${item.price_type === 'offer' ? '–ü–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é' : '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞'}</div>
                                </div>
                                <div class="item-price">${UI.formatPrice(item.price)}</div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
        });

        historyHtml += '</div>';

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (pagination && pagination.total_pages > 1) {
            historyHtml += this.renderHistoryPagination(pagination);
        }

        historyTab.innerHTML = historyHtml;
    }

    renderHistoryPagination(pagination) {
        let paginationHtml = '<div class="history-pagination">';

        if (pagination.current_page > 1) {
            paginationHtml += `
                <button class="btn btn-secondary btn-sm" onclick="profileModule.loadPurchaseHistory(${pagination.current_page - 1})">
                    ‚Üê –ù–∞–∑–∞–¥
                </button>
            `;
        }

        paginationHtml += `<span>–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pagination.current_page} –∏–∑ ${pagination.total_pages}</span>`;

        if (pagination.current_page < pagination.total_pages) {
            paginationHtml += `
                <button class="btn btn-secondary btn-sm" onclick="profileModule.loadPurchaseHistory(${pagination.current_page + 1})">
                    –í–ø–µ—Ä–µ–¥ ‚Üí
                </button>
            `;
        }

        paginationHtml += '</div>';
        return paginationHtml;
    }

    async loadActiveOffers() {
        try {
            const response = await api.getActiveOffers();
            if (response.success) {
                this.activeOffers = response.offers;
                this.renderActiveOffers();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:', error);
            UI.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π');
        }
    }

    renderActiveOffers() {
        const offersTab = document.getElementById('active-offers');
        if (!offersTab) return;

        if (this.activeOffers.length === 0) {
            offersTab.innerHTML = `
                <div class="empty-state">
                    <h3>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</h3>
                    <p>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ü–µ–Ω</p>
                    <button class="btn btn-primary" onclick="catalogModule.showCatalog()">
                        –ù–∞–π—Ç–∏ —Å–∞–π—Ç—ã –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                    </button>
                </div>
            `;
            return;
        }

        let offersHtml = '<div class="active-offers">';
        
        this.activeOffers.forEach(offer => {
            const timeLeft = offer.expires_at ? UI.formatTimeLeft(offer.expires_at) : '';
            const isWinning = offer.status === 'winning';
            const isHighest = offer.offered_price >= offer.highest_offer;

            offersHtml += `
                <div class="offer-card ${isWinning ? 'winning' : ''}">
                    <div class="offer-header">
                        <div class="offer-site">
                            <h4>${UI.escapeHtml(offer.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</h4>
                            <div class="offer-url">${UI.escapeHtml(offer.url)}</div>
                            <div class="offer-category">${offer.category_name}</div>
                        </div>
                        <div class="offer-status">
                            ${isWinning ? 
                                '<span class="status-badge status-success">üèÜ –í—ã–∏–≥—Ä—ã–≤–∞–µ—Ç–µ</span>' :
                                isHighest ? 
                                    '<span class="status-badge status-warning">üìà –õ–∏–¥–∏—Ä—É–µ—Ç–µ</span>' :
                                    '<span class="status-badge status-info">üìä –£—á–∞—Å—Ç–≤—É–µ—Ç–µ</span>'
                            }
                        </div>
                    </div>
                    
                    <div class="offer-details">
                        <div class="offer-prices">
                            <div class="your-offer">
                                <span class="label">–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</span>
                                <span class="price">${UI.formatPrice(offer.offered_price)}</span>
                            </div>
                            <div class="current-max">
                                <span class="label">–¢–µ–∫—É—â–∏–π –º–∞–∫—Å–∏–º—É–º:</span>
                                <span class="price">${UI.formatPrice(offer.highest_offer)}</span>
                            </div>
                            ${offer.fixed_price ? `
                                <div class="fixed-price">
                                    <span class="label">–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞:</span>
                                    <span class="price">${UI.formatPrice(offer.fixed_price)}</span>
                                </div>
                            ` : ''}
                        </div>
                        
                        <div class="offer-timing">
                            ${timeLeft && !isWinning ? 
                                `<div class="time-left">‚è∞ ${timeLeft}</div>` : ''
                            }
                            ${isWinning ? 
                                '<div class="winning-notice">üéâ –£ –≤–∞—Å –µ—Å—Ç—å 15 –º–∏–Ω—É—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É!</div>' : ''
                            }
                        </div>
                    </div>
                    
                    <div class="offer-actions">
                        <button class="btn btn-primary btn-sm" onclick="catalogModule.showSiteDetails(${offer.site_id})">
                            –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∞–π—Ç
                        </button>
                        ${!isWinning ? 
                            `<button class="btn btn-secondary btn-sm" onclick="catalogModule.showOfferModal(${offer.site_id})">
                                –ü–æ–≤—ã—Å–∏—Ç—å —Å—Ç–∞–≤–∫—É
                            </button>` : ''
                        }
                    </div>
                </div>
            `;
        });

        offersHtml += '</div>';
        offersTab.innerHTML = offersHtml;
    }

    async loadPurchaseCategories() {
        const categoriesTab = document.getElementById('purchase-categories');
        if (!categoriesTab) return;

        categoriesTab.innerHTML = `
            <div class="category-purchases">
                <div class="category-section">
                    <h4>–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã</h4>
                    <button class="btn btn-secondary" onclick="profileModule.loadCategoryHistory('shop')">
                        –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é SHOP
                    </button>
                </div>
                
                <div class="category-section">
                    <h4>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</h4>
                    <button class="btn btn-secondary" onclick="profileModule.loadCategoryHistory('adminki')">
                        –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é ADMINKI
                    </button>
                </div>
                
                <div class="category-section">
                    <h4>–ê–≤—Ç–æ—Ä—Å–∫–∏–µ —Å–∞–π—Ç—ã</h4>
                    <button class="btn btn-secondary" onclick="profileModule.loadCategoryHistory('autors')">
                        –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é AUTORS
                    </button>
                </div>
                
                <div class="category-section">
                    <h4>SEO –¥–æ–º–µ–Ω—ã</h4>
                    <button class="btn btn-secondary" onclick="profileModule.loadCategoryHistory('ceo')">
                        –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é CEO
                    </button>
                </div>
                
                <div class="category-section">
                    <h4>–ö—É–ø–ª–µ–Ω–Ω—ã–µ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π —Ü–µ–Ω–µ</h4>
                    <button class="btn btn-secondary" onclick="profileModule.loadCategoryHistory('offer')">
                        –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                    </button>
                </div>
            </div>
            
            <div id="category-history-content"></div>
        `;
    }

    async loadCategoryHistory(category) {
        try {
            const response = await api.getPurchaseHistoryByCategory(category);
            if (response.success) {
                this.renderCategoryHistory(response.orders, category);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
            UI.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        }
    }

    renderCategoryHistory(orders, category) {
        const contentEl = document.getElementById('category-history-content');
        if (!contentEl) return;

        const categoryNames = {
            shop: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã',
            adminki: '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', 
            autors: '–ê–≤—Ç–æ—Ä—Å–∫–∏–µ —Å–∞–π—Ç—ã',
            ceo: 'SEO –¥–æ–º–µ–Ω—ã',
            offer: '–ü–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π —Ü–µ–Ω–µ'
        };

        if (orders.length === 0) {
            contentEl.innerHTML = `
                <div class="empty-state">
                    <h3>–ù–µ—Ç –ø–æ–∫—É–ø–æ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryNames[category]}"</h3>
                </div>
            `;
            return;
        }

        let historyHtml = `<h3>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫: ${categoryNames[category]}</h3>`;
        historyHtml += '<div class="category-history">';

        orders.forEach(order => {
            historyHtml += `
                <div class="order-card">
                    <div class="order-header">
                        <div>–ó–∞–∫–∞–∑ #${order.id}</div>
                        <div>${UI.formatDate(order.created_at, true)}</div>
                        <div>${UI.formatPrice(order.total_amount)}</div>
                    </div>
                    <div class="order-items">
                        ${order.items.map(item => `
                            <div class="order-item">
                                <div>${UI.escapeHtml(item.title || item.url)}</div>
                                <div>${UI.formatPrice(item.price)}</div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
        });

        historyHtml += '</div>';
        contentEl.innerHTML = historyHtml;
    }

    getStatusText(status) {
        const statusTexts = {
            'pending': '–û–∂–∏–¥–∞–µ—Ç',
            'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
        };
        return statusTexts[status] || status;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    window.profileModule = new ProfileModule();
});