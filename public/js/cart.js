// –ú–æ–¥—É–ª—å –∫–æ—Ä–∑–∏–Ω—ã
class CartModule {
    constructor() {
        this.cartItems = [];
        this.isReserved = false;
        this.reservationExpires = null;
        this.totalAmount = 0;
    }

    async init() {
        this.bindEvents();
        await this.updateCartBadge();
    }

    bindEvents() {
        // –§–æ—Ä–º–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
        const offerForm = document.getElementById('offer-form');
        if (offerForm) {
            offerForm.addEventListener('submit', (e) => this.handleOfferSubmit(e));
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.addEventListener('click', (e) => {
            if (e.target.hasAttribute('data-close')) {
                const modalId = e.target.getAttribute('data-close');
                UI.hideModal(modalId);
            }
        });

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –∫–æ—Ä–∑–∏–Ω–µ
        const cartLink = document.querySelector('.cart-link');
        if (cartLink) {
            cartLink.addEventListener('click', (e) => {
                e.preventDefault();
                this.showCart();
            });
        }
    }

    async showCart() {
        UI.hide('dashboard-section');
        UI.hide('site-details-section');
        UI.hide('profile-section');
        UI.show('cart-section');

        await this.loadCart();
    }

    async loadCart() {
        try {
            const response = await api.getCart();
            if (response.success) {
                this.cartItems = response.items;
                this.isReserved = response.is_reserved;
                this.reservationExpires = response.reservation_expires;
                this.totalAmount = response.total_amount;
                
                this.renderCart();
                this.updateCartBadge();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
            UI.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã');
        }
    }

    renderCart() {
        const cartContent = document.getElementById('cart-content');
        if (!cartContent) return;

        if (this.cartItems.length === 0) {
            this.renderEmptyCart();
            return;
        }

        let cartHtml = '<div class="cart-items">';

        this.cartItems.forEach(item => {
            cartHtml += this.createCartItemHtml(item);
        });

        cartHtml += '</div>';

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
        if (this.isReserved && this.reservationExpires) {
            const timeLeft = this.getTimeLeft(this.reservationExpires);
            cartHtml += `
                <div class="reservation-info">
                    ‚è∞ –ö–æ—Ä–∑–∏–Ω–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ ${timeLeft}
                </div>
            `;
        }

        // –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        cartHtml += `
            <div class="cart-summary">
                <div class="cart-total">
                    <span>–ò—Ç–æ–≥–æ:</span>
                    <span>${UI.formatPrice(this.totalAmount)}</span>
                </div>
                
                <div class="cart-actions">
                    ${this.cartItems.length >= 2 && !this.isReserved ? 
                        '<button class="btn btn-warning" onclick="cartModule.reserveCart()">–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã</button>' 
                        : ''
                    }
                    
                    ${this.isReserved || this.cartItems.length === 1 ? 
                        '<button class="btn btn-success" onclick="cartModule.createOrder()">–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑</button>' 
                        : '<p class="reservation-note">–î–ª—è –∑–∞–∫–∞–∑–∞ –æ—Ç 2 —Ç–æ–≤–∞—Ä–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è</p>'
                    }
                    
                    <button class="btn btn-secondary" onclick="cartModule.clearCart()">–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É</button>
                </div>
            </div>
        `;

        cartContent.innerHTML = cartHtml;

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è
        if (this.isReserved && this.reservationExpires) {
            this.startReservationTimer();
        }
    }

    createCartItemHtml(item) {
        const priceDisplay = item.price || item.fixed_price;
        const priceType = item.price_type === 'offer' ? '–ü–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é' : '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞';

        return `
            <div class="cart-item" data-site-id="${item.site_id}">
                <div class="cart-item-info">
                    <div class="cart-item-title">${UI.escapeHtml(item.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</div>
                    <div class="cart-item-url">${UI.escapeHtml(item.url)}</div>
                    <div class="cart-item-category">${item.category_name}</div>
                    <div class="cart-item-type">${priceType}</div>
                    ${item.reserved_at ? '<div class="cart-item-reserved">üîí –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ</div>' : ''}
                </div>
                
                <div class="cart-item-actions">
                    <div class="cart-item-price">${UI.formatPrice(priceDisplay)}</div>
                    ${!item.reserved_at ? 
                        `<button class="btn btn-danger btn-sm" onclick="cartModule.removeFromCart(${item.site_id})">
                            –£–¥–∞–ª–∏—Ç—å
                        </button>` 
                        : '<span class="reserved-text">–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ</span>'
                    }
                </div>
            </div>
        `;
    }

    renderEmptyCart() {
        const cartContent = document.getElementById('cart-content');
        if (cartContent) {
            cartContent.innerHTML = `
                <div class="empty-cart">
                    <h3>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h3>
                    <p>–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞</p>
                    <button class="btn btn-primary" onclick="catalogModule.showCatalog()">
                        –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ç–∞–ª–æ–≥—É
                    </button>
                </div>
            `;
        }
    }

    async addToCart(siteId, priceType, price = null) {
        try {
            const response = await api.addToCart(siteId, priceType, price);
            if (response.success) {
                UI.showSuccess('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É');
                await this.updateCartBadge();
                
                // –ï—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ—Ä–∑–∏–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
                const cartSection = document.getElementById('cart-section');
                if (cartSection && !cartSection.classList.contains('hidden')) {
                    await this.loadCart();
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
            UI.showError(error.message);
        }
    }

    async removeFromCart(siteId) {
        const confirmed = await UI.confirm('–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã?');
        if (!confirmed) return;

        try {
            await api.removeFromCart(siteId);
            UI.showSuccess('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã');
            await this.loadCart();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:', error);
            UI.showError(error.message);
        }
    }

    async reserveCart() {
        try {
            const response = await api.reserveCart();
            if (response.success) {
                UI.showSuccess('–ö–æ—Ä–∑–∏–Ω–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 15 –º–∏–Ω—É—Ç');
                await this.loadCart();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
            UI.showError(error.message);
        }
    }

    async clearCart() {
        const confirmed = await UI.confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É?');
        if (!confirmed) return;

        try {
            await api.clearCart();
            UI.showSuccess('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
            await this.loadCart();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
            UI.showError(error.message);
        }
    }

    async createOrder() {
        const confirmed = await UI.confirm('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É ' + UI.formatPrice(this.totalAmount) + '?');
        if (!confirmed) return;

        try {
            const response = await api.createOrder();
            if (response.success) {
                UI.showSuccess(`–ó–∞–∫–∞–∑ #${response.order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`);
                
                // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ª–æ–∫–∞–ª—å–Ω–æ
                this.cartItems = [];
                this.totalAmount = 0;
                this.isReserved = false;
                
                await this.updateCartBadge();
                this.renderCart();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
                setTimeout(() => {
                    if (window.profileModule) {
                        window.profileModule.showProfile();
                        window.profileModule.showTab('purchase-history');
                    }
                }, 2000);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
            UI.showError(error.message);
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if (error.message.includes('–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')) {
                setTimeout(() => {
                    window.location.reload();
                }, 3000);
            }
        }
    }

    async updateCartBadge() {
        try {
            const response = await api.getCart();
            if (response.success) {
                const badge = document.getElementById('cart-badge');
                if (badge) {
                    badge.textContent = response.items.length;
                    badge.style.display = response.items.length > 0 ? 'flex' : 'none';
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã:', error);
        }
    }

    async handleOfferSubmit(e) {
        e.preventDefault();
        
        const formData = new FormData(e.target);
        const price = parseFloat(formData.get('price'));
        const siteId = parseInt(e.target.dataset.siteId);

        if (!price || price <= 0) {
            UI.showError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É');
            return;
        }

        if (!siteId) {
            UI.showError('–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Å–∞–π—Ç');
            return;
        }

        const submitBtn = e.target.querySelector('button[type="submit"]');
        UI.setLoading(submitBtn, true);

        try {
            let response;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const siteDetails = await api.getSiteDetails(siteId);
            
            if (siteDetails.user_offer && siteDetails.user_offer.status === 'active') {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                response = await api.updatePriceOffer(siteId, price);
            } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                response = await api.makePriceOffer(siteId, price);
            }

            if (response.success) {
                UI.showSuccess('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
                UI.hideModal('offer-modal');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–π—Ç–µ –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–µ—Ç–∞–ª–µ–π
                const siteDetailsSection = document.getElementById('site-details-section');
                if (siteDetailsSection && !siteDetailsSection.classList.contains('hidden')) {
                    setTimeout(() => {
                        if (window.catalogModule) {
                            window.catalogModule.showSiteDetails(siteId);
                        }
                    }, 1000);
                }
                
                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                e.target.reset();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', error);
            UI.showError(error.message);
        } finally {
            UI.setLoading(submitBtn, false);
        }
    }

    getTimeLeft(expiresAt) {
        const now = new Date();
        const expiry = new Date(expiresAt);
        const diff = expiry - now;

        if (diff <= 0) return '–ò—Å—Ç–µ–∫–ª–æ';

        const minutes = Math.floor(diff / (1000 * 60));
        const seconds = Math.floor((diff % (1000 * 60)) / 1000);

        return `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }

    startReservationTimer() {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        if (this.reservationTimer) {
            clearInterval(this.reservationTimer);
        }

        this.reservationTimer = setInterval(() => {
            const timeLeft = this.getTimeLeft(this.reservationExpires);
            
            const reservationInfo = document.querySelector('.reservation-info');
            if (reservationInfo) {
                if (timeLeft === '–ò—Å—Ç–µ–∫–ª–æ') {
                    clearInterval(this.reservationTimer);
                    UI.showWarning('–†–µ–∑–µ—Ä–≤–∞—Ü–∏—è –∏—Å—Ç–µ–∫–ª–∞');
                    this.loadCart(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
                } else {
                    reservationInfo.innerHTML = `‚è∞ –ö–æ—Ä–∑–∏–Ω–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ ${timeLeft}`;
                }
            }
        }, 1000);
    }

    async checkAvailability() {
        try {
            const response = await api.checkCartAvailability();
            if (response.success && response.removed_count > 0) {
                UI.showWarning(`${response.removed_count} —Ç–æ–≤–∞—Ä–æ–≤ —Å—Ç–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã`);
                await this.loadCart();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', error);
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    clearCart() {
        this.cartItems = [];
        this.totalAmount = 0;
        this.isReserved = false;
        this.reservationExpires = null;
        
        if (this.reservationTimer) {
            clearInterval(this.reservationTimer);
            this.reservationTimer = null;
        }
        
        this.updateCartBadge();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    window.cartModule = new CartModule();
});