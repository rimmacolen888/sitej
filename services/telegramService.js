const TelegramBot = require('node-telegram-bot-api');
const DatabaseService = require('./databaseService');

class TelegramService {
    constructor() {
        this.bot = null;
        this.chatId = null;
        this.isInitialized = false;
    }

    async init() {
        try {
            const token = process.env.TELEGRAM_BOT_TOKEN;
            const chatId = process.env.TELEGRAM_CHAT_ID;

            if (!token || !chatId) {
                console.log('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID)');
                return;
            }

            this.bot = new TelegramBot(token, { polling: false });
            this.chatId = chatId;
            this.isInitialized = true;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await this.bot.getMe();
            console.log('Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
            this.setupBotCommands();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞:', error.message);
            this.isInitialized = false;
        }
    }

    setupBotCommands() {
        if (!this.bot) return;

        // –ö–æ–º–∞–Ω–¥–∞ /start
        this.bot.onText(/\/start/, async (msg) => {
            const chatId = msg.chat.id;
            await this.bot.sendMessage(chatId, 
                'ü§ñ –ë–æ—Ç Site Marketplace –∑–∞–ø—É—â–µ–Ω!\n\n' +
                '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
                '/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã\n' +
                '/orders - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã\n' +
                '/users - –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n' +
                '/sites - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∞–π—Ç–∞–º'
            );
        });

        // –ö–æ–º–∞–Ω–¥–∞ /stats - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        this.bot.onText(/\/stats/, async (msg) => {
            try {
                const stats = await this.getStats();
                await this.bot.sendMessage(msg.chat.id, stats);
            } catch (error) {
                await this.bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ /orders - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã
        this.bot.onText(/\/orders/, async (msg) => {
            try {
                const orders = await this.getRecentOrders();
                await this.bot.sendMessage(msg.chat.id, orders);
            } catch (error) {
                await this.bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤');
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ /users - –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        this.bot.onText(/\/users/, async (msg) => {
            try {
                const users = await this.getActiveUsers();
                await this.bot.sendMessage(msg.chat.id, users);
            } catch (error) {
                await this.bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ /sites - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∞–π—Ç–∞–º
        this.bot.onText(/\/sites/, async (msg) => {
            try {
                const sites = await this.getSitesStats();
                await this.bot.sendMessage(msg.chat.id, sites);
            } catch (error) {
                await this.bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∞–π—Ç–æ–≤');
            }
        });
    }

    async sendNotification(message, options = {}) {
        if (!this.isInitialized) {
            console.log('Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω):', message);
            return;
        }

        try {
            const defaultOptions = {
                parse_mode: 'HTML',
                disable_web_page_preview: true
            };

            await this.bot.sendMessage(
                this.chatId, 
                message, 
                { ...defaultOptions, ...options }
            );
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
        }
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö
    async notifyNewOrder(order, items, user) {
        const totalItems = items.length;
        const itemsList = items.map(item => 
            `‚Ä¢ ${item.title || item.url} - ${item.price}‚ÇΩ`
        ).join('\n');

        const message = 
            `üõí <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #${order.id}</b>\n\n` +
            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username}\n` +
            `üí∞ –°—É–º–º–∞: ${order.total_amount}‚ÇΩ\n` +
            `üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${totalItems}\n\n` +
            `<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n${itemsList}\n\n` +
            `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;

        await this.sendNotification(message);
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö —Ü–µ–Ω
    async notifyPriceOffer(site, offer, user) {
        const message = 
            `üí∞ <b>–ù–û–í–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –¶–ï–ù–´</b>\n\n` +
            `üåê –°–∞–π—Ç: ${site.title || site.url}\n` +
            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username}\n` +
            `üíµ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞: ${offer.offered_price}‚ÇΩ\n` +
            `üí≤ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: ${site.fixed_price || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}‚ÇΩ\n\n` +
            `‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${new Date(offer.expires_at).toLocaleString('ru-RU')}`;

        await this.sendNotification(message);
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    async notifyNewImport(categoryName, stats) {
        const message = 
            `üìÇ <b>–ó–ê–ì–†–£–ñ–ï–ù–´ –ù–û–í–´–ï ${categoryName.toUpperCase()}</b>\n\n` +
            `üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${stats.total_records}\n` +
            `‚úÖ –£—Å–ø–µ—à–Ω–æ: ${stats.successful_records}\n` +
            `‚ùå –û—à–∏–±–æ–∫: ${stats.failed_records}\n` +
            `üîç –ù–∞–π–¥–µ–Ω–æ –≤ –∞–Ω—Ç–∏–ø–∞–±–ª–∏–∫: ${stats.antipublic_found || 0}\n\n` +
            `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;

        await this.sendNotification(message);
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async notifyUserBlocked(user, reason) {
        const message = 
            `üö´ <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù</b>\n\n` +
            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username}\n` +
            `üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}\n` +
            `üïê –î–æ: ${new Date(user.blocked_until).toLocaleString('ru-RU')}\n\n` +
            `‚è∞ –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}`;

        await this.sendNotification(message);
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–∏–≥—Ä—ã—à–µ –∞—É–∫—Ü–∏–æ–Ω–∞
    async notifyAuctionWin(site, offer, user) {
        const message = 
            `üèÜ <b>–ê–£–ö–¶–ò–û–ù –ó–ê–í–ï–†–®–ï–ù</b>\n\n` +
            `üåê –°–∞–π—Ç: ${site.title || site.url}\n` +
            `üë§ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${user.username}\n` +
            `üí∞ –í—ã–∏–≥—Ä—ã—à–Ω–∞—è —Ü–µ–Ω–∞: ${offer.offered_price}‚ÇΩ\n\n` +
            `‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å 15 –º–∏–Ω—É—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É\n` +
            `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;

        await this.sendNotification(message);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    async getStats() {
        try {
            const result = await DatabaseService.query(`
                SELECT 
                    (SELECT COUNT(*) FROM users) as total_users,
                    (SELECT COUNT(*) FROM users WHERE access_expires_at > CURRENT_TIMESTAMP) as active_users,
                    (SELECT COUNT(*) FROM sites WHERE status = 'available') as available_sites,
                    (SELECT COUNT(*) FROM sites WHERE status = 'sold') as sold_sites,
                    (SELECT COUNT(*) FROM orders WHERE status = 'confirmed') as total_orders,
                    (SELECT COALESCE(SUM(total_amount), 0) FROM orders WHERE status = 'confirmed') as total_revenue,
                    (SELECT COUNT(*) FROM price_offers WHERE status = 'active') as active_offers
            `);

            const stats = result.rows[0];

            return `üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–õ–ê–¢–§–û–†–ú–´</b>\n\n` +
                   `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}\n` +
                   `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.active_users}\n\n` +
                   `üåê –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∞–π—Ç–æ–≤: ${stats.available_sites}\n` +
                   `üí∞ –ü—Ä–æ–¥–∞–Ω–æ: ${stats.sold_sites}\n\n` +
                   `üõí –ó–∞–∫–∞–∑–æ–≤: ${stats.total_orders}\n` +
                   `üíµ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${stats.total_revenue}‚ÇΩ\n\n` +
                   `üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: ${stats.active_offers}`;

        } catch (error) {
            return '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏';
        }
    }

    async getRecentOrders() {
        try {
            const result = await DatabaseService.query(`
                SELECT o.id, o.total_amount, o.created_at, u.username,
                       COUNT(oi.id) as items_count
                FROM orders o
                JOIN users u ON o.user_id = u.id
                LEFT JOIN order_items oi ON o.id = oi.order_id
                WHERE o.created_at > CURRENT_TIMESTAMP - INTERVAL '24 hours'
                GROUP BY o.id, o.total_amount, o.created_at, u.username
                ORDER BY o.created_at DESC
                LIMIT 10
            `);

            if (result.rows.length === 0) {
                return 'üì¶ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞';
            }

            let message = 'üì¶ <b>–ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ö–ê–ó–´ (24—á)</b>\n\n';
            
            result.rows.forEach(order => {
                message += `#${order.id} - ${order.username}\n` +
                          `üí∞ ${order.total_amount}‚ÇΩ (${order.items_count} —Ç–æ–≤–∞—Ä–æ–≤)\n` +
                          `‚è∞ ${new Date(order.created_at).toLocaleString('ru-RU')}\n\n`;
            });

            return message;

        } catch (error) {
            return '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤';
        }
    }

    async getActiveUsers() {
        try {
            const result = await DatabaseService.query(`
                SELECT username, last_login, access_expires_at,
                       (SELECT COUNT(*) FROM orders WHERE user_id = users.id) as orders_count
                FROM users 
                WHERE access_expires_at > CURRENT_TIMESTAMP
                ORDER BY last_login DESC NULLS LAST
                LIMIT 10
            `);

            if (result.rows.length === 0) {
                return 'üë• –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π';
            }

            let message = 'üë• <b>–ê–ö–¢–ò–í–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò</b>\n\n';
            
            result.rows.forEach(user => {
                const lastLogin = user.last_login ? 
                    new Date(user.last_login).toLocaleString('ru-RU') : 
                    '–ù–∏–∫–æ–≥–¥–∞';
                    
                message += `${user.username}\n` +
                          `üìà –ó–∞–∫–∞–∑–æ–≤: ${user.orders_count}\n` +
                          `üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: ${lastLogin}\n` +
                          `‚è≥ –î–æ—Å—Ç—É–ø –¥–æ: ${new Date(user.access_expires_at).toLocaleDateString('ru-RU')}\n\n`;
            });

            return message;

        } catch (error) {
            return '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π';
        }
    }

    async getSitesStats() {
        try {
            const result = await DatabaseService.query(`
                SELECT 
                    c.name as category_name,
                    COUNT(CASE WHEN s.status = 'available' THEN 1 END) as available,
                    COUNT(CASE WHEN s.status = 'sold' THEN 1 END) as sold,
                    COUNT(CASE WHEN s.status = 'reserved' THEN 1 END) as reserved,
                    AVG(CASE WHEN s.fixed_price IS NOT NULL THEN s.fixed_price END) as avg_price
                FROM categories c
                LEFT JOIN sites s ON c.id = s.category_id
                GROUP BY c.id, c.name
                ORDER BY c.name
            `);

            let message = 'üåê <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú</b>\n\n';
            
            result.rows.forEach(cat => {
                const avgPrice = cat.avg_price ? Math.round(cat.avg_price) : 0;
                message += `üìÇ <b>${cat.category_name.toUpperCase()}</b>\n` +
                          `‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: ${cat.available || 0}\n` +
                          `üí∞ –ü—Ä–æ–¥–∞–Ω–æ: ${cat.sold || 0}\n` +
                          `‚è≥ –í —Ä–µ–∑–µ—Ä–≤–µ: ${cat.reserved || 0}\n` +
                          `üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${avgPrice}‚ÇΩ\n\n`;
            });

            return message;

        } catch (error) {
            return '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∞–π—Ç–æ–≤';
        }
    }
}

module.exports = new TelegramService();