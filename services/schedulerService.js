const cron = require('node-cron');
const DatabaseService = require('./databaseService');
const TelegramService = require('./telegramService');

class SchedulerService {
    constructor() {
        this.jobs = new Map();
        this.isRunning = false;
        this.startDelay = 10000; // 10 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
    }

    start() {
        if (this.isRunning) return;
        
        console.log('–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        setTimeout(() => {
            this.scheduleOfferExpiration();
            this.scheduleUserUnblock();
            this.scheduleCartCleanup();
            this.scheduleDailyStats();
            this.scheduleWinningOfferNotifications();
            
            this.isRunning = true;
            console.log('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω');
        }, this.startDelay);
    }

    stop() {
        if (!this.isRunning) return;
        
        console.log('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...');
        
        this.jobs.forEach((job, name) => {
            job.destroy();
            console.log(`–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: ${name}`);
        });
        
        this.jobs.clear();
        this.isRunning = false;
        console.log('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    scheduleOfferExpiration() {
        const job = cron.schedule('*/5 * * * *', async () => {
            try {
                await this.processExpiredOffers();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:', error.message);
            }
        }, {
            scheduled: false // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É
        });

        job.start();
        this.jobs.set('offerExpiration', job);
        console.log('–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)');
    }

    scheduleUserUnblock() {
        const job = cron.schedule('*/10 * * * *', async () => {
            try {
                await this.processUserUnblock();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
            }
        }, {
            scheduled: false
        });

        job.start();
        this.jobs.set('userUnblock', job);
        console.log('–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞: —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)');
    }

    scheduleCartCleanup() {
        const job = cron.schedule('0 2 * * *', async () => {
            try {
                await this.cleanupExpiredCarts();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω:', error.message);
            }
        }, {
            scheduled: false
        });

        job.start();
        this.jobs.set('cartCleanup', job);
        console.log('–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞: –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 02:00)');
    }

    scheduleDailyStats() {
        const job = cron.schedule('0 9 * * *', async () => {
            try {
                await this.sendDailyStats();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
            }
        }, {
            scheduled: false
        });

        job.start();
        this.jobs.set('dailyStats', job);
        console.log('–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞: –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00)');
    }

    scheduleWinningOfferNotifications() {
        const job = cron.schedule('*/2 * * * *', async () => {
            try {
                await this.processWinningOffers();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:', error.message);
            }
        }, {
            scheduled: false
        });

        job.start();
        this.jobs.set('winningOffers', job);
        console.log('–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö (–∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã)');
    }

    async processExpiredOffers() {
        try {
            const expiredOffers = await DatabaseService.query(`
                SELECT po.*, s.title, s.url, u.username, u.id as user_id
                FROM price_offers po
                JOIN sites s ON po.site_id = s.id
                JOIN users u ON po.user_id = u.id
                WHERE po.status = 'active' AND po.expires_at < CURRENT_TIMESTAMP
            `);

            if (expiredOffers.rows.length === 0) return;

            console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ ${expiredOffers.rows.length} –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π`);

            for (const offer of expiredOffers.rows) {
                await DatabaseService.query(`
                    UPDATE price_offers 
                    SET status = 'expired' 
                    WHERE id = $1
                `, [offer.id]);

                const remainingOffers = await DatabaseService.query(`
                    SELECT * FROM price_offers 
                    WHERE site_id = $1 AND status = 'active' 
                    ORDER BY offered_price DESC
                    LIMIT 1
                `, [offer.site_id]);

                if (remainingOffers.rows.length > 0) {
                    const winningOffer = remainingOffers.rows[0];
                    
                    await DatabaseService.query(`
                        UPDATE price_offers 
                        SET status = 'winning', purchase_deadline = CURRENT_TIMESTAMP + INTERVAL '15 minutes'
                        WHERE id = $1
                    `, [winningOffer.id]);

                    const winnerUser = await DatabaseService.getUserById(winningOffer.user_id);
                    if (winnerUser) {
                        await TelegramService.notifyWinningOffer(
                            { title: offer.title, url: offer.url },
                            winningOffer,
                            winnerUser
                        );
                    }
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ processExpiredOffers:', error);
            throw error;
        }
    }

    async processUserUnblock() {
        try {
            const result = await DatabaseService.query(`
                UPDATE users 
                SET is_blocked = false, blocked_until = NULL 
                WHERE is_blocked = true AND blocked_until < CURRENT_TIMESTAMP
                RETURNING username
            `);

            if (result.rows.length > 0) {
                console.log(`–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.rows.length}`);
                
                for (const user of result.rows) {
                    await TelegramService.notifyUserUnblocked(user);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ processUserUnblock:', error);
            throw error;
        }
    }

    async cleanupExpiredCarts() {
        try {
            const result = await DatabaseService.query(`
                DELETE FROM cart_items 
                WHERE reservation_expires_at < CURRENT_TIMESTAMP
                RETURNING *
            `);

            const deletedCount = result.rows.length;
            if (deletedCount > 0) {
                console.log(`–û—á–∏—â–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π –∫–æ—Ä–∑–∏–Ω: ${deletedCount}`);
            }

            const oldCartItems = await DatabaseService.query(`
                DELETE FROM cart_items 
                WHERE created_at < CURRENT_TIMESTAMP - INTERVAL '7 days'
                RETURNING *
            `);

            const oldDeletedCount = oldCartItems.rows.length;
            if (oldDeletedCount > 0) {
                console.log(`–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω: ${oldDeletedCount}`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ cleanupExpiredCarts:', error);
            throw error;
        }
    }

    async sendDailyStats() {
        try {
            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            
            const statsResult = await DatabaseService.query(`
                SELECT 
                    COUNT(CASE WHEN u.created_at::date = $1 THEN 1 END) as new_users,
                    COUNT(CASE WHEN o.created_at::date = $1 AND o.status = 'confirmed' THEN 1 END) as confirmed_orders,
                    COALESCE(SUM(CASE WHEN o.created_at::date = $1 AND o.status = 'confirmed' THEN o.total_amount END), 0) as daily_revenue,
                    COUNT(CASE WHEN po.created_at::date = $1 THEN 1 END) as new_offers,
                    COUNT(CASE WHEN s.upload_date::date = $1 THEN 1 END) as new_sites
                FROM users u
                FULL OUTER JOIN orders o ON 1=1
                FULL OUTER JOIN price_offers po ON 1=1
                FULL OUTER JOIN sites s ON 1=1
            `, [yesterday.toISOString().split('T')[0]]);

            const stats = statsResult.rows[0];
            
            const message = `üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
üìÖ –î–∞—Ç–∞: ${yesterday.toLocaleDateString('ru-RU')}

üë• –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.new_users}
üõí –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${stats.confirmed_orders}
üí∞ –í—ã—Ä—É—á–∫–∞: ${stats.daily_revenue}‚ÇΩ
üí° –ù–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${stats.new_offers}
üåê –ù–æ–≤—ã—Ö —Å–∞–π—Ç–æ–≤: ${stats.new_sites}`;

            await TelegramService.sendNotification(message);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ sendDailyStats:', error);
            throw error;
        }
    }

    async processWinningOffers() {
        try {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
            const expiredWinners = await DatabaseService.query(`
                SELECT po.*, s.title, s.url, u.username, u.id as user_id
                FROM price_offers po
                JOIN sites s ON po.site_id = s.id
                JOIN users u ON po.user_id = u.id
                WHERE po.status = 'winning' AND po.purchase_deadline < CURRENT_TIMESTAMP
            `);

            for (const offer of expiredWinners.rows) {
                await DatabaseService.query(`
                    UPDATE price_offers 
                    SET status = 'expired_winner' 
                    WHERE id = $1
                `, [offer.id]);

                await DatabaseService.blockUser(offer.user_id, 4);

                await TelegramService.notifyExpiredWinner(
                    { title: offer.title, url: offer.url },
                    offer,
                    { username: offer.username, id: offer.user_id }
                );
            }

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
            const almostExpiredWinners = await DatabaseService.query(`
                SELECT po.*, s.title, s.url, u.username
                FROM price_offers po
                JOIN sites s ON po.site_id = s.id
                JOIN users u ON po.user_id = u.id
                WHERE po.status = 'winning' 
                AND po.purchase_deadline > CURRENT_TIMESTAMP
                AND po.purchase_deadline < CURRENT_TIMESTAMP + INTERVAL '5 minutes'
                AND po.last_reminder_sent IS NULL
            `);

            for (const offer of almostExpiredWinners.rows) {
                await TelegramService.notifyLastChance(
                    { title: offer.title, url: offer.url },
                    offer,
                    { username: offer.username }
                );

                await DatabaseService.query(`
                    UPDATE price_offers 
                    SET last_reminder_sent = CURRENT_TIMESTAMP 
                    WHERE id = $1
                `, [offer.id]);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ processWinningOffers:', error);
            throw error;
        }
    }
}

module.exports = new SchedulerService();